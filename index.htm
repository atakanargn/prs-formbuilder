<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Fedora Form Builder</title>
    <link rel="stylesheet" href="assets/css/style.css" />
    <link rel="stylesheet" href="assets/css/dragula.css" />
    <link rel="stylesheet" href="assets/css/hint.css" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;700&family=Poppins:wght@300;400;500;700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div class="ffb-container">
      <div>
        <ul class="form-edit-tabs" id="form-tabs">
          <li to="tab-elements">Araçlar</li>
          <li to="tab-edit">Düzenle</li>
          <li to="tab-general">Genel</li>
        </ul>
        <div class="tabs" id="tab-elements">
          <ul class="ffb-elements" id="elements"></ul>
        </div>
        <div class="tabs" id="tab-edit">
          <ul class="ffb-elements">
            <div class="form-component" id="edit-component"></div>
          </ul>
        </div>
        <div class="tabs" id="tab-general">
          <div class="form-component">
            <div class="form-editor">
              <label> Form adı </label>
              <input type="text" id="form_name" value="" />
            </div>
            <div class="form-editor">
              <label> Anahtar </label>
              <input type="text" id="form_key" value="" />
            </div>
            <div class="form-editor">
              <label> Hedef </label>
              <input type="text" id="form_target" value="formHandle" />
            </div>
            <div class="form-editor">
              <label> Hedef Tablo </label>
              <input type="text" id="form_target_table" value="" />
            </div>
            <div class="form-editor">
              <label> Function </label>
              <input type="text" id="form_function" value="" />
            </div>
            <div class="form-editor">
              <label> Yönlendirme </label>
              <input type="text" id="form_redirect" value="" />
            </div>
            <div class="form-editor">
              <label> Yetki </label>
              <input type="text" id="form_authorization" value="" />
            </div>
            <div class="form-editor">
              <label> Görünüm </label>
              <select id="form_authorization">
                <option val="0">Tam görünüm</option>
                <option val="1">Yarım görünüm</option>
              </select>
            </div>
            <div class="form-editor">
              <button id="save_form">Kaydet</button>
            </div>
          </div>
        </div>
      </div>
      <div>
        <ul class="form-edit-tabs" id="form-tabs2">
          <li to="tab2-edit">Düzenleme</li>
          <li to="tab2-preview">Önizleme</li>
        </ul>
        <div class="tabs" id="tab2-edit">
          <ul class="ffb-elements" id="preview"></ul>
        </div>
        <div class="tabs" id="tab2-preview">ÖNİZLEME</div>
      </div>
    </div>

    <script src="assets/js/dragula.js"></script>
    <script src="assets/js/hint.js"></script>
    <script src="assets/js/form_elements.js"></script>
    <script src="assets/js/form-utils.js"></script>
    <script>
      // Seçili element
      var selected_element;

      // Düzenlenen form elemanları
      var result_form = {};

      window.addEventListener("load", () => {
        // form_elements.js içerisinden gelen
        // Tüm form elemanlarını döndürüyoruz
        Object.keys(form_elements).forEach((el) => {
          // Her elemanı bir liste elemanı içerisine ekleyeceğiz
          let obj = document.createElement("li");
          // Her eleman için ikon ekliyoruz
          let img = document.createElement("img");
          img.src = `/assets/img/elements/${el}.svg`;
          // Liste içine ikonu ekledik
          obj.appendChild(img);
          // Form elemanı ismini de ikonun sonrasına ekledik
          obj.innerHTML = obj.innerHTML + form_elements[el]["name"];
          // Form elemanı id'sini ("boolean","text","select",vs.)
          // bu liste elemanının id'sine verdik
          obj.id = el;
          // 'elements' id'li div içerisine ekledik
          document.getElementById("elements").appendChild(obj);
        });
      });

      // drag&drop kütüphanesi, purejs kütüphanesidir
      var drake = dragula(
        [
          // elements üzerinden
          document.getElementById("elements"),
          // preview div'i üzerine sürükleme işlemi yapılacak
          document.getElementById("preview"),
        ],
        {
          // Sadece elements kaynağından kopyalama işlemi yapılabilir.
          copy: (el, source) => {
            return source.id === "elements";
          },
          // 'elements' div'i üzerine yapılan
          // sürükleme işlemlerine izin verilmeyecek
          accepts: (el, target, source, sibling) => {
            return target !== document.getElementById("elements");
          },
          // Boşluğa bırakılan elemanlar yok olacaktır
          // 'elements' copy özelliğine sahip olduğu için onda çalışmayacaktır
          // sadece düzenlenen form elemanları boşluğa sürükleyince silinecektir
          removeOnSpill: true,
        }
      )
        // Eleman sürükleme eventi
        .on("drag", (element) => {
          // Eğer 'id' değeri içerisinde '-' var ise
          // 'preview' üzerinden yapılan bir sürükleme
          // işlemi anlamına gelir
          if (element.id.includes("-")) {
            // Bu sürükleme işlemlerinde sürüklenen elementi seç
            selectForEdit(element);
          }
        })
        // Eleman bırakma eventi
        .on("drop", (element, target, source) => {
          // Eğer 'id' değeri içerisinde '-' yok ise
          // 'elements' üzerinden yapılan bir sürükleme
          // işlemi anlamına gelir
          if (!element.id.includes("-")) {
            // Boş bir div oluştur
            let div = document.createElement("div");
            // 'form-edit' class'ını ekle
            div.classList.add("form-edit");
            // randomID() metodu ile 16 haneli bir
            // rastgele id üretiyoruz
            let uts = randomID();

            // Her eleman için oluşturulan obje
            var element_object = {
              id: `${uts}`, // randomID()
              order: -1, // Order ilk eklenen "-1" hemen sonra sıralama tekrar yapılacak
              type: element.id, // form_elements key değeri direkt type olarak gelecektir
              width: "100%", // Eleman ilk yatay uzunluk değeri 100 olarak gelecektir
              name: `name-${uts}`, // Geçici bir isim
              label: form_elements[element.id]["name"], // form_elements name değeri ilk etiket olarak belirlenir
              helptext: false, // helptext başlangıçta kapalı
              helptext_visible: "display:none;", // visible değeri başlangıçta kapalı
              required: true, // Zorunlu değeri ilk değer true
              class: "",
              css: "",
              condition: 0, // Aktif - Pasif - Ekle - Düzenle

              placeholder: "",
              validation: false,

              default: form_elements[element.id]["default"],
              endpoint: false,
              attr: "",
              options: false,
            };

            // result_form dizisine yeni eleman eklenir
            result_form[`${uts}`] = element_object;

            // form_elements içerisinden elemanın
            // ["template"] değerini çekiyoruz
            // render_curly_brackets() metodu ile obje içerisindeki
            // key değerleri eşleşir ve karşılık gelen değer yerleştirilir
            let template = render_curly_brackets(
              element_object,
              form_elements[element.id]["template"]
            );

            // Yeni element id değeri
            // içerideki input ile karışmaması için
            // değeri güncelledik
            element.id = `${element.id}-li-${uts}`;
            element.classList.add("form-element");
            element.style.width = element_object.width;

            // Sol üstteki butonlar
            // "SİL","ARTIR","MANUEL ARTIR","EKSİLT"
            let buttons = `
            <button class="increase-button" id="inc-${element.id}" onclick="increaseSizeOfComponent('${element.id}',this);" disabled="">
              +
            </button>
            <input type="number" class="width-input no-spin" min="20" max="100" step="10" onclick="this.select();" onblur="changeWidth('${element.id}',this);" id="width-${element.id}" value="100" />
            <button class="decrease-button" id="dec-${element.id}" onclick="decreaseSizeOfComponent('${element.id}',this);">
              -
            </button>
            <button class="cancel-button" onclick="deleteComponent('${element.id}');">
              <img src="/assets/img/cancel.svg" />
            </button>`;

            // Butonlar ve render edilmiş template birleştirildi
            div.innerHTML = buttons + template;
            element.innerHTML = div.outerHTML;

            // Liste elementi click eventi
            // tetiklenirse mevcut elementi
            // seçme işlemi için selectForEdit() metodu çağırılır
            element.addEventListener("click", () => {
              selectForEdit(element);
            });

            // defaultElement içerideki asıl elementi seçiyoruz
            var defaultElement = document.getElementById(
              `real-component-${uts}`
            );
            // Içerideki asıl elementin tipi
            var tagName = defaultElement.tagName.toLowerCase();

            // Tip bunlardan biri ise
            if (
              tagName == "input" ||
              tagName == "textarea" ||
              tagName == "select"
            ) {
              // Bu kısımda eklenen form elemanının "default" değerini render ettikten sonra
              // formdaki asıl component'in default değeri haline getiriyoruz
              // farklı element tiplerindeki özel durumlar için switch ile kontrol gerçekleştirdik
              switch (defaultElement.type) {
                case "boolean":
                  defaultElement.removeAttribute("checked");
                  defaultElement.setAttribute("checked", "");
                  break;
                case "checkbox":
                  defaultElement.removeAttribute("checked");
                  defaultElement.setAttribute("checked", "");
                  break;
                // Genel tip value ile değer aldığı için
                // switch içerisinde default altına yerlerştirdik
                default:
                  defaultElement.value =
                    form_elements[element_object.type]["default"];
                  break;
              }
            }

            // Required değeri hem editor, hem editables alanında bu metod ile güncellenecektir
            changeRequire(`${uts}`, { checked: element_object["required"] });
            // Önizleme metodu, her form işleminden sonra çalışacaktır
            // preview();
          }
          // Sıralama metodu
          // bırakma işleminde her zaman çalışacaktır
          // bu sayede form içerisinde elemanlar arası düzenlemede "order" değerleri anlık olarak güncellenir
          reOrder();
        });

      // Yeniden dizme metodu
      function reOrder() {
        // preview içerisindeki tüm childNode'ları aldık
        // yani "li" içeren tüm elemanlar
        var lis = document.getElementById("preview").childNodes;
        // sayaç
        let cnt = 0;
        // Liste içerisindeki tüm elemanları döndür
        lis.forEach((element) => {
          // id değerini bul
          let id = element.id.split("-")[2];
          // Bulunan id değerine sahip listenin "order" değerini
          // o anki sayaç değerine güncelle
          result_form[`${id}`]["order"] = cnt;
          // sayacı artır
          cnt++;
        });
      }

      // TODO : Preview metodu
      // build.html içerisindeki şekilde build etmek üzere düzenlenecek
      function preview() {
        var lis = document.getElementById("preview").childNodes;
        preview_tab = document.getElementById("tab2-preview");
        preview_tab.innerHTML = "";
        lis.forEach((element) => {
          var add_form =
            element.getElementsByClassName("form-component")[0].innerHTML;
          preview_tab.innerHTML = preview_tab.innerHTML + add_form;
        });
      }

      // Form elemanı seçim metodu
      function selectForEdit(el) {
        // Eğer mevcutta seçili eleman zaten tıklanan eleman değilse
        if (selected_element != el) {
          // Preview içerisindeki tüm elemanları listeye aldık
          const elements = [
            ...document.getElementById("preview").getElementsByTagName("li"),
          ];
          // Tüm elemanları döndürdük
          elements.forEach((element) => {
            // Elemanların classList'i içerisinden "select-for-edit" class'ını sildik
            // unselected gösterdik elemanı
            element.classList.remove("select-for-edit");
          });
          // Sadece bizim tıkladığımız elemana
          // "select-for-edit" class'ını ekledik
          el.classList.add("select-for-edit");
          // Seçim işlemi gerçekleştikten sonra
          // otomatik "Düzenleme" tabını aktif ettik
          tabs1.change("tab-edit");
          // selected_element'i tıklanan elemente eşitledik
          selected_element = el;
          // "Düzenleme" tabı içerisindeki editable alanları render ettik
          renderEditor(selected_element);
        }
      }

      // Quick action : Delete button
      function deleteComponent(id) {
        // id'si verilen elemeanı bulduk
        // preview içerisinden sildik
        document
          .getElementById("preview")
          .removeChild(document.getElementById(id));
        // Form elemanları tab'ına geçiş yaptık
        // selected_element değerini de null yaptık

        // TODO : setTimeout kaldırılacak
        // neden kullanılıyor hatırlamıyorum, denemesi yapılacak
        setTimeout(() => {
          tabs1.change("tab-elements");
          selected_element = null;
        }, 2);
      }

      // Form elemanı yatay genişlik artırma
      function increaseSizeOfComponent(id, el) {
        // Form elemanı en dışı seçildi yani liste
        let li = document.getElementById(`${id}`);
        // width değeri eğer mevcut width değeri
        //  '100' değerinden küçük ise +10 eklenerek güncellendi
        // değilse yani '100' veya fazlası ise mevcut değerinde kaldı ve güncellenmedi
        li.style.width =
          li.style.width.split("%")[0] < 100
            ? `${parseInt(li.style.width.split("%")[0]) + 10}%`
            : li.style.width;

        // Eğer yeni değer "100%" oldu ise
        if (li.style.width == "100%") {
          // Artırma butonunu disabled yapıyoruz
          el.setAttribute("disabled", "");
          // Azaltma butonunu enabled yapıyoruz
          document.getElementById(`dec-${id}`).removeAttribute("disabled");
        }

        // Eğer yeni değer "20%"den büyük ise
        if (li.style.width.split("%")[0] > 20) {
          // Azaltma butonunu enabled yapıyoruz
          document.getElementById(`dec-${id}`).removeAttribute("disabled");
        }

        // width input değerini ise tekrar güncelliyoruz
        let width_input = document.getElementById(`width-${id}`);
        width_input.value = li.style.width.replace("%", "");

        // TODO : Width güncellemesi editable alanındaki input için de yapılacak.
      }

      // Şarkı önerisi
      // https://www.youtube.com/watch?v=SsKT0s5J8ko

      // Form elemanı yatay genişlik azaltma
      // increaseSizeOfComponent() benzer mantıkta çalışır
      function decreaseSizeOfComponent(id, el) {
        let li = document.getElementById(`${id}`);
        li.style.width =
          li.style.width.split("%")[0] > 20
            ? `${parseInt(li.style.width.split("%")[0]) - 10}%`
            : li.style.width;
        if (li.style.width == "20%") {
          el.setAttribute("disabled", "");
          document.getElementById(`inc-${id}`).removeAttribute("disabled");
        }

        if (li.style.width.split("%")[0] < 100) {
          document.getElementById(`inc-${id}`).removeAttribute("disabled");
        }

        let width_input = document.getElementById(`width-${id}`);
        width_input.value = li.style.width.replace("%", "");
        // TODO : Width güncellemesi editable alanındaki input için de yapılacak.
      }

      // TODO Min func
      function changeMin(id, el) {}

      // TODO Max func
      function changeMax(id, el) {}

      // TODO Step func
      function changeStep(id, el) {}

      // TODO Attr func
      function changeAttr(id, el) {}

      // TODO Rows func
      function changeRows(id, el) {}

      // TODO Multiple func
      function changeMultiple(id, el) {}

      // TODO Endpoint func
      function changeEndpoint(id, el) {}

      // TODO Endpoint test func
      function testEndpoint(id, el) {}

      // Width değişikliği olduğunda tetiklenen metod
      function changeWidth(id, el) {
        el.value = roundToTen(el.value, 20, 100, 10);
        let li = document.getElementById(`${id}`);
        li.style.width = `${el.value}%`;
        // TODO : Hem quick actions hem de editable alanındaki width değerlerini güncelle
      }

      // Component Edit Functions
      function addOption(id, el) {
        let new_option = new Option(
          el.parentNode.getElementsByTagName("input")[0].value,
          el.parentNode.getElementsByTagName("input")[1].value
        );
      }

      // Required alanında herhangi bir değişiklik olursa
      // bu metod çağırılır
      function changeRequire(id, el) {
        // form elemanı required özelliğine sahip mi?
        if (
          document
            .getElementById(`form-component-${id}`)
            .getElementsByClassName("comp-required").length != 0
        ) {
          // required alanı açık ise
          if (el.checked) {
            // required sembolü gösterilecek
            document.getElementById(`component-required-${id}`).style.display =
              "block";
          } else {
            // required sembolü gösterilmeyecek
            document.getElementById(`component-required-${id}`).style.display =
              "none";
          }
          // Sonuç istenen id'ye sahip form elemanı bulunup güncellenir
          result_form[id]["required"] = el.checked;
        }
      }

      // Koşul değiştirme
      function changeCondition(id, el) {
        // Direkt option değerlerini alacaktır
        // 0 - 1 - 2 - 3
        // Aktif - Pasif - Ekle - Düzenle
        result_form[`${id}`]["condition"] = el.value;
      }

      // Etiket değiştirme metodu
      function changeLabel(id, el) {
        // Form elemanı label özelliğine sahip mi?
        if (
          document
            .getElementById(`form-component-${id}`)
            .getElementsByClassName(`form-edit-label`).length != 0
        ) {
          // Label boşluklar temizlendikten sonra yerine yerleştirilir
          document.getElementById(`component-label-${id}`).innerHTML =
            el.value.trim();
          // Sonuç istenen id'ye sahip form elemanı bulunup güncellenir
          result_form[id]["label"] = el.value.trim();
        }
      }

      // Yardım yazısı güncelleme
      function changeHelpText(id, el) {
        // Eleman özelliğe sahip mi?
        if (
          document
            .getElementById(`form-component-${id}`)
            .getElementsByClassName("helptext-button").length != 0
        ) {
          // Yardım kutusundan gelen değerin uzunluğu '0' değil ise
          if (el.value.trim().length != 0) {
            // data-hint attribute'ünü güncelliyoruz
            // hint.js kütüphanesi data-hint özelliği olan objeler
            // hint box özelliğini otomatik olarak eklemektedir
            document
              .getElementById(`helptext-button-${id}`)
              .setAttribute("data-hint", `${el.value.trim()}`);
            // Buton görünürlüğü
            document.getElementById(`helptext-button-${id}`).style.display =
              "block";
            // Form elemanı içerisindeki değeri de güncelliyoruz
            result_form[`${id}`]["helptext"] = el.value.trim();
          } else {
            // data-hint attribute'ünü siliyoruz
            document
              .getElementById(`helptext-button-${id}`)
              .removeAttribute("data-hint");
            // Buton görünürlüğü
            document.getElementById(`helptext-button-${id}`).style.display =
              "none";
            // Form elemanı içerisindeki değeri de güncelliyoruz
            result_form[`${id}`]["helptext"] = "";
          }
        }
      }

      // Class değeri güncelleme
      function changeClass(id, el) {
        // Component class değeri güncellenir
        // Direkt üst div'i aldık, template'e en uygun güncelleme yöntemi bu şekidle olacaktır
        document
          .getElementById(`form-component-${id}`)
          .setAttribute("class", el.value.trim());
        // Form elemanında da güncelleme sağladık
        result_form[`${id}`]["class"] = el.value.trim();
      }

      // Placeholder değeri güncelleme metodu
      function changePlaceholder(id, el) {
        // inputları bulup placeholder değerlerini güncelledik
        document
          .getElementById(`real-component-${id}`)
          .setAttribute("placeholder", el.value.trim());
        // Form elemanında da güncelleme sağladık
        result_form[`${id}`]["placeholder"] = el.value.trim();
      }

      // CSS direkt input'a uygulanacaktır
      function changeCSS(id, el) {
        // sağ-sol boşluklar temizlendi.
        // \n karakterleri temizlendi.
        let up_css = el.value.trim().replaceAll("\n", "");
        // style attribute'ü silinir
        document
          .getElementById(`real-component-${id}`)
          .removeAttribute("style");
        // \n değerleri var ise temizlenerek tekrar güncel css değerleri ile tekrar eklenir
        document
          .getElementById(`real-component-${id}`)
          .setAttribute("style", up_css);
        // Form elemanında da güncelleme sağladık
        result_form[`${id}`]["css"] = up_css;
      }

      // name değeri güncelleme
      function changeName(id, name) {
        // name değeri boş değil ise
        if (name.trim() != "") {
          // name error message kutusu görünürlüğü kapatılacaktır
          document.getElementsByClassName(
            "name-error-message"
          )[0].style.display = "none";
          // içerideki mesaj da boşaltılacaktır
          document.getElementsByClassName("name-error-message")[0].textContent =
            "";
          // Form elemanı değeri de güncellenir
          result_form[`${id}`]["name"] = name.trim();
          // result_form içerisindeki tüm elemanlar
          // yani eklenmiş tüm form elemanları döndürülür
          Object.keys(result_form).forEach((el) => {
            // Dönen eleman mevcut eleman ile aynı değilse
            if (el != id) {
              // name değerlerini karşılaştır
              // girilen name değeri ile aynı değer daha önce girildiyse
              if (result_form[el]["name"] == name) {
                // name-error-message hatası eklendi
                document.getElementsByClassName(
                  "name-error-message"
                )[0].innerHTML =
                  "Bu isim başka form elemanına ait!<br/>Lütfen başka bir isim belirle!";
                // name-error-message görünür hale getirildi
                document.getElementsByClassName(
                  "name-error-message"
                )[0].style.display = "block";
              }
            }
          });
        }
      }

      // Validation regex değeri
      function changeRegex(id, el) {
        // Regex ifadesi boş değil ise
        if (el.value.trim() != "") {
          // Yeni regex değeri geldiyse ve validation son değeri 'false' ise
          if (result_form[`${id}`]["validation"] == false) {
            // boş nesneye dönüştür
            result_form[`${id}`]["validation"] = {};
          }
          // Regex ifadesini içeriye yerleştir
          result_form[`${id}`]["validation"]["regex"] = el.value;
        // Boşsa validation false değerine düşecektir
        } else {
          result_form[`${id}`]["validation"] = false;
        }
      }

      // Validation test metodu
      function testValidation(id, el) {
        // Girilen ifade çekilir
        const inputValue = el.value;
        // Regex çekilir ve Regex() nesnesine dönüştürülür
        const regex = new RegExp(result_form[`${id}`]["validation"]["regex"]);

        // ifade ile girilen değer uyuyor mu kontrol edilir
        if (regex.test(inputValue)) {
          // uyuyorsa Test isimli input arkaplanı yeşil olacaktır
          // yani geçerlidir
          el.classList.remove("invalid");
          el.classList.add("valid");
        } else {
          // uymuyorsa Test isimli input arkaplanı kırmızı olacaktır
          // yani geçersizdir, regex ifadeye uymamaktadır
          el.classList.remove("valid");
          el.classList.add("invalid");
        }

        // input boş ise arkaplan tekrar beyaz olacaktır
        if (inputValue === "") {
          el.classList.remove("valid", "invalid");
        }
      }

      // Varsayılan değer güncelleme
      function changeDefault(id, el) {
        // element tipini aldık
        switch (el.type) {
          // checkbox tipinde ise
          case "checkbox":
            // checked değerini güncelledik
            result_form[id]["default"] = el.checked;
            document.getElementById(`real-component-${id}`).checked =
              result_form[id]["default"];
            break;

          default:
            // Diğer durumlar genelde value ile çalışıyor
            // bu yüzden switch default case'i bu şekilde kalabilir
            // Özel durumlar üste eklenmeye devam edecektir
            result_form[id]["default"] = el.value;
            document.getElementById(`real-component-${id}`).value =
              result_form[id]["default"];
            break;
        }
      }

      // Validation mesajı güncelleme
      function changeValidationMessage(id, el) {
        // Eğer regex ifade tanımlı ise
        if (result_form[`${id}`]["validation"]["regex"] != undefined) {
          // Girilen değer boş değil ise
          if (el.value.trim() != "") {
            // Yeni değeri tanımla
            result_form[`${id}`]["validation"]["error"] = el.value;
          }else{
            result_form[`${id}`]["validation"]["error"] = "";
          }
        }
      }

      function renderEditor(el) {
        document.getElementById("edit-component").innerHTML = "";
        
        let editables = form_elements[el.id.split("-")[0]]["editor"];

        let el_id = selected_element.id.split("-")[2];
        for (let i = 0; i < editables.length; i++) {
          // TODO : Bu kısımdaki tüm replaceAll kısımlarını
          // render_curly_brackets() metoduna dönüştür
          document.getElementById("edit-component").innerHTML =
            document.getElementById("edit-component").innerHTML +
            `${editor_elements[editables[i]]
              .replaceAll(
                "{{required}}",
                result_form[`${el_id}`]["required"] ? 'checked=""' : ""
              )
              .replaceAll("{{id}}", el_id)
              .replaceAll("{{label}}", result_form[`${el_id}`]["label"].trim())
              .replaceAll(
                "{{helptext}}",
                result_form[`${el_id}`]["helptext"] == false
                  ? ""
                  : result_form[`${el_id}`]["helptext"]
              )}`
              .replaceAll("{{css}}", result_form[`${el_id}`]["css"])
              .replaceAll("{{name}}", result_form[`${el_id}`]["name"])
              .replaceAll("{{class}}", result_form[`${el_id}`]["class"])
              .replaceAll("{{default}}", result_form[`${el_id}`]["default"])
              .replaceAll(
                "{{placeholder}}",
                result_form[`${el_id}`]["placeholder"]

                // TODO : replace min
                // TODO : replace max
                // TODO : replace step
                // TODO : replace attr
                // TODO : replace endpoints
                // TODO : replace width
                // TODO : replace rows
                // TODO : replace rows
              );

          document.getElementById("edit-component").innerHTML = document
            .getElementById("edit-component")
            .innerHTML.replaceAll(
              `{{condition_selected_${result_form[`${el_id}`]["condition"]}}}`,
              "selected"
            );
          try {
            for (let j = 0; j < 3; j++) {
              if (result_form[`${el_id}`]["condition"] != j)
                document.getElementById("edit-component").innerHTML = document
                  .getElementById("edit-componenet")
                  .innerHTML.replaceAll(`{{condition_selected_${j}}}`, "");
            }
          } catch (err) {}
        }
      }

      // FedoraTab library
      class FedoraTab {
        #tabs;

        constructor(id) {
          this.#find_and_select(id);
        }

        #find_and_select(id) {
          this.#tabs = document.getElementById(id).getElementsByTagName("li");
          let not_selected = true;
          for (let i = 0; i < this.#tabs.length; i++) {
            document.getElementById(
              this.#tabs[i].getAttribute("to")
            ).style.display = "none";
            const self = this;
            this.#tabs[i].addEventListener("click", () => {
              self.select(this.#tabs[i]);
            });
            let classes = this.#tabs[i].classList;
            for (let j = 0; j < classes.length; j++) {
              if (classes[j] == "selected")
                document.getElementById(
                  this.#tabs[i].getAttribute("to")
                ).style.display = "block";
            }
          }
          if (not_selected) {
            document.getElementById(
              this.#tabs[0].getAttribute("to")
            ).style.display = "block";
            this.#tabs[0].classList.add("selected");
          }
        }

        select(el) {
          for (let i = 0; i < this.#tabs.length; i++) {
            this.#tabs[i].classList.remove("selected");
            document.getElementById(
              this.#tabs[i].getAttribute("to")
            ).style.display = "none";
          }
          el.classList.add("selected");
          document.getElementById(el.getAttribute("to")).style.display =
            "block";
        }

        change(tab) {
          let el = document.getElementById(tab);
          let selected_tab;
          for (let i = 0; i < this.#tabs.length; i++) {
            this.#tabs[i].classList.remove("selected");
            document.getElementById(
              this.#tabs[i].getAttribute("to")
            ).style.display = "none";
            if (this.#tabs[i].getAttribute("to") == tab)
              selected_tab = this.#tabs[i];
          }
          selected_tab.classList.add("selected");
          el.style.display = "block";
        }
      }

      const tabs1 = new FedoraTab("form-tabs");
      const tabs2 = new FedoraTab("form-tabs2");
    </script>
  </body>
</html>
